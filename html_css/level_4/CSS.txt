The CSS Level 4

* La ultima propiedad de CSS es la dominante. cuando vas a organuzar tu CSS
toma en cuenta este detalle. 

* comma (,)

    We use , for divide the elements in the CSS.

    h1, h2, h3 {
        properties
    }

    Now all h1 to h3 are goint to have the same properties, not need to
    write over and over the same.

* flexbox

    syntax:

    display: flex; 'Para convertirlo en flexbox'
    justify-content: end; 'horisontal axis' (X)
    align-items: center; 'vertical axis' (Y)

    -justify-content:
    start, center, end, space-around, 
    space-evenly, space-between (divide the extra space between element)
    
    -align-items:
    start, center, end, stretch (crese y se encoje auto)

    * flex-direction

    syntax:

    flex-direction: value;

        Work on 'row' by default. (horisontal)
        Can be column = top to bottom (vertical)

    *  align-self

    syntax:

    .element {
    align-self: value; alinea un elemento
    }

    use height: 100% in the html, body and container to make the 
    container take up the full height of the page.

    * flex

    syntax:

    flex: 1 1 250px; grow, shrink (encoger), basis (medida base)

    Aplicar a los elementos que quieras controlar

    Ver flexbox folder for more info and details.

* Los inline-block para centralisar usamos
    margin: 0 auto;

* tag:hover add tag:focus (buena practica tener ambos)

    syntax:
    
    tagName:hover {
        background-image: url("eyes.jpg")
        background-color: #f0f0f0; (Para crear sombra)
        font-size: 40px;
        cursor: pointer;
    }
    
    -Puedes usar solo uno o mas. Para pointer hay mas opciones.
    -Para algo custom usa url().
    -El hover funciona no importa la ubicacion en su css.

    tagName:active {
        transform: scale(1.1); funciona cuando hace click. 
    }

    button {
    touch-action: manipulation; /* Mejora la velocidad de respuesta al clic */
    }


    * Mientras mas espesifico seas css va a priorisar las propiedades.

* aria

    role="img" aria-label="description"

    -'role' para identificar que es.
    -'aria-label' como si fuera alt="description" en HTML, se aplica
    esta syntax en el tag para crear una descripcion en caso de que
    NO se pueda ver la imagen o gif que usemos.

* gradient

    syntax:

    background: linear-gradient(color1, color2);

    opciones de linear:
    -to top, to bottom, to left, to right
    -45deg
    
    background: linear-gradient(to right, red 0%, blue 50%, green 100%);
    % de degradado.

    otras opciones:

    -background: radial-gradient(circle at center, red, yellow, green);
    -background: conic-gradient(from 90deg, red, yellow, blue);
    -background: repeating-linear-gradient(45deg, red, yellow 10px);

* audio

    syntax:

    <audio controls>
			<a href="media/audio/scrimbaPodTom.mp3">download audio</a>
			<source src="media/audio/scrimbaPodTom.mp3" type="audio/mp3">
			<source src="media/audio/scrimbaPodTom.wav" type="audio/wav">
		</audio>

    Al tener 2 source y separandolo con el tag de source en caso de no 
    funcionar intenta con el otro. el type es para el tipo de file.

* video 

    syntax:

    <video controls width="400" height="225">
			<a href="media/video/scrimbaPodTom.mp4">download video</a>
			<source src="media/video/scrimbaPodTom.mp4" type="video/mp4">
			<source src="media/video/scrimbaPodTom.webm" type="video/webm">
		</video>

    can add <track> for captions, transcripts

    control, muted, loop, autoplay are other options for the video tag.

* html table

    <table></table> Para declarar que es una tabla
    <caption></caption> For the title
    <th scope="row or column"></th> Para heading de la tabla
    <tbody></tbody> body of table
    <tr></tr> for defines row
    <td></td> cell of table
    <tfoot></tfoot>

    -Crea una tabla no es como grip ni como flex.
    -Scope se usa para definir que es.

* text-decoration

    syntax:

    text-decoration: value;
    text-decoration-thickness: 3px;
    text-decoration-thickness: 3px; revisar en la web para mas opciones.

    values:
    none = elimina todo, (quita la decoration)
    underline = subrallado

    text-transform: value;
    Para letra mayuscula.

* letter-spacing

    syntax:

    letter-spacing: 2px;
    Se usa para separar las letras.

* word-spacing

    syntax:

    word-spacing: 2px;
    Se usa para separar las palabras.

* text-transform: uppercase; (mayuscula)

* transition

    syntax:

    transition: opacity 2s; 
    Se usa para que el contenedor aparezca de forma lenta

* weight (ancho)

    syntax:

    width: min(maxPxValue, 90%); 
    Esto se usa para que el contenedor no sea mayor a maxPxValue ni al 90%

    width: max(minPxValue, 90%); 
    Esto se usa para que el contenedor no sea menor a 300px ni al 90%

    combinar ambos usar clamp()

    width: clamp(min, preferred, max);
    
* box-sizing

    box-sizing: border-box;
    Esto se usa para que el padding y border no afecten el tama√±o del contenedor.

* overflow

    overflow: value;
    hidden, scroll, auto, visible

    -hidden = esconde el contenido que no cabe
    -scroll = agrega scroll
    -auto = agrega scroll solo si es necesario
    -visible = muestra todo el contenido    

* position

    position: value;
    relative, absolute, fixed, sticky

    -relative = se mueve en relacion a su posicion original
    -absolute = se mueve en relacion a su contenedor
    -fixed = se mueve en relacion a la ventana
    -sticky = se mueve en relacion a su contenedor y se queda fijo

* z-index

    z-index: value;
    Se usa para definir que elemento esta por encima de otro.

* transform

    transform: value;
    rotate(45deg), scale(1.5), translate(50px, 100px), skew(10deg, 20deg)

    -rotate = rota el elemento
    -scale = escala el elemento
    -translate = mueve el elemento
    -skew = inclina el elemento

* transition

    transition: value;
    Se usa para hacer una transicion suave entre los cambios.

    -transition: all 2s; (todos los cambios)
    -transition: opacity 2s; (solo la opacidad) opacity significa transparencia.
    -transition: transform 2s; (solo la transformacion)

    transition-timing-function: value;
    ease, linear, ease-in, ease-out, ease-in-out

    -ease = empieza lento y termina rapido
    -linear = va a la misma velocidad
    -ease-in = empieza lento
    -ease-out = termina lento
    -ease-in-out = empieza y termina lento

* animation

    animation: value;
    name, duration, timing-function, delay, iteration-count, direction, fill-mode, play-state

    -name = nombre de la animacion
    -duration = duracion de la animacion
    -timing-function = velocidad de la animacion
    -delay = tiempo antes de que empiece la animacion
    -iteration-count = numero de veces que se repite
    -direction = hacia donde va la animacion
    -fill-mode = que pasa cuando la animacion termina
    -play-state = si la animacion esta en pausa o no

    @keyframes name {
        from {
            properties
        }
        to {
            properties
        }
    }

    -from = estado inicial
    -to = estado final
    -Se usa para crear una animacion.

    @keyframes name {
        0% {
            properties
        }
        50% {
            properties
        }
        100% {
            properties
        }
    }

    NOTES: para mas detalles ver folder de animation.

* @media

    @media (max-width: 600px) {
        properties
    }

    -max-width = maximo ancho de la pantalla
    -min-width = minimo ancho de la pantalla
    -max-height = maximo alto de la pantalla
    -min-height = minimo alto de la pantalla

    -Se usa para hacer que el contenido se adapte a la pantalla.

* @supports

    @supports (display: grid) {
        properties
    }

    -Se usa para verificar si el navegador soporta cierta propiedad.







